from starkcore.utils.api import from_api_json
from starkcore.utils.resource import Resource
from starkcore.utils.checks import check_datetime, check_date
from ...utils import rest
from ..__acquiringpurchase import _resource as _acquiring_purchase_resource


class Log(Resource):
    """# acquiringpurchase.Log object
    Every time an AcquiringPurchase entity is updated, a corresponding acquiringpurchase.Log
    is generated for the entity. This log is never generated by the
    user, but it can be retrieved to check additional information
    on the AcquiringPurchase.
    ## Attributes:
    - id [string]: unique id returned when the log is created. ex: "5656565656565656"
    - purchase [AcquiringPurchase]: AcquiringPurchase entity to which the log refers to.
    - acquiring_transaction_id [string]: transaction ID related to the AcquiringPurchase.
    - errors [list of strings]: list of errors linked to this AcquiringPurchase event.
    - type [string]: type of the AcquiringPurchase event which triggered the log creation. ex: "approved", "canceled", "confirmed", "denied", "reversed", "voided"
    - created [datetime.datetime]: creation datetime for the log. ex: datetime.datetime(2020, 3, 10, 10, 30, 0, 0)
    """

    def __init__(self, id, purchase, acquiring_transaction_id, errors, type, created):
        Resource.__init__(self, id=id)

        self.purchase = from_api_json(_acquiring_purchase_resource, purchase)
        self.acquiring_transaction_id = acquiring_transaction_id
        self.errors = errors
        self.type = type
        self.created = check_datetime(created)


_resource = {"class": Log, "name": "AcquiringPurchaseLog"}


def get(id, user=None):
    """# Retrieve a specific acquiringpurchase.Log
    Receive a single acquiringpurchase.Log object previously created by the Stark Bank API by its id
    ## Parameters (required):
    - id [string]: object unique id. ex: "5656565656565656"
    ## Parameters (optional):
    - user [Organization/Project object, default None]: Organization or Project object. Not necessary if starkBank.user was set before function call
    ## Return:
    - acquiringpurchase.Log object with updated attributes
    """
    return rest.get_id(resource=_resource, id=id, user=user)


def query(ids=None, limit=None, after=None, before=None, types=None, purchase_ids=None, user=None):
    """# Retrieve acquiringpurchase.Log
    Receive a generator of acquiringpurchase.Log objects previously created in the Stark Bank API
    ## Parameters (optional):
    - ids [list of strings, default None]: list of AcquiringPurchase ids to filter logs. ex: ["5656565656565656", "4545454545454545"]
    - limit [integer, default None]: maximum number of objects to be retrieved. Unlimited if None. ex: 35
    - after [datetime.date or string, default None] date filter for objects created only after specified date. ex: datetime.date(2020, 3, 10)
    - before [datetime.date or string, default None] date filter for objects created only before specified date. ex: datetime.date(2020, 3, 10)
    - types [list of strings, default None]: filter for log event types. ex: ["approved", "canceled", "confirmed", "denied", "reversed", "voided"]
    - purchase_ids [list of strings, default None]: list of Purchase ids to filter logs. ex: ["5656565656565656", "4545454545454545"]
    - user [Organization/Project object, default None]: Organization or Project object. Not necessary if starkBank.user was set before function call
    ## Return:
    - generator of acquiringpurchase.Log objects with updated attributes
    """
    return rest.get_stream(
        resource=_resource,
        ids=ids,
        limit=limit,
        after=check_date(after),
        before=check_date(before),
        types=types,
        purchase_ids=purchase_ids,
        user=user,
    )


def page(cursor=None, ids=None, limit=None, after=None, before=None, types=None, purchase_ids=None, user=None):
    """# Retrieve paged acquiringpurchase.Log
    Receive a list of up to 100 acquiringpurchase.Log objects previously created in the Stark Bank API and the cursor to the next page.
    Use this function instead of query if you want to manually page your requests.
    ## Parameters (optional):
    - cursor [string, default None]: cursor returned on the previous page function call
    - ids [list of strings, default None]: list of AcquiringPurchase ids to filter logs. ex: ["5656565656565656", "4545454545454545"]
    - limit [integer, default 100]: maximum number of objects to be retrieved. Max = 100. ex: 35
    - after [datetime.date or string, default None] date filter for objects created only after specified date. ex: datetime.date(2020, 3, 10)
    - before [datetime.date or string, default None] date filter for objects created only before specified date. ex: datetime.date(2020, 3, 10)
    - types [list of strings, default None]: filter for log event types. ex: ["approved", "canceled", "confirmed", "denied", "reversed", "voided"]
    - purchase_ids [list of strings, default None]: list of Purchase ids to filter logs. ex: ["5656565656565656", "4545454545454545"]
    - user [Organization/Project object, default None]: Organization or Project object. Not necessary if starkBank.user was set before function call
    ## Return:
    - list of acquiringpurchase.Log objects with updated attributes
    - cursor to retrieve the next page of acquiringpurchase.Log objects
    """
    return rest.get_page(
        resource=_resource,
        cursor=cursor,
        ids=ids,
        limit=limit,
        after=check_date(after),
        before=check_date(before),
        types=types,
        purchase_ids=purchase_ids,
        user=user,
    )
